/*

Omicron cartridge build script
ver 1.4

Do not change this, they're equals for all games.
Personalize your omicron.properties instead

*/

apply plugin: 'java'
apply plugin: "maven-publish"

sourceCompatibility = 1.8

assert file("./omicron.properties").exists()

file("./omicron.properties").withReader { 
   Properties props = new Properties()
   props.load(it)
   ext.omicron = props
   println ext.omicron
}

/*
assert omicron.entry!=null : "In omicron.properties: entry is mandatory"
assert omicron.name!=null : "In omicron.properties: name is mandatory"
assert omicron.description!=null : "In omicron.properties: description is mandatory"
assert omicron.version!=null : "In omicron.properties: version is mandatory"
assert omicron.author!=null : "In omicron.properties: author is mandatory"
assert omicron.year!=null : "In omicron.properties: year is mandatory"
assert omicron.minPlayers!=null : "In omicron.properties: minPlayers is mandatory"
assert omicron.maxPlayers!=null : "In omicron.properties: maxPlayers is mandatory"
assert omicron.mouse!=null : "In omicron.properties: mouse is mandatory"
assert omicron.keyboard!=null : "In omicron.properties: keyboard is mandatory"
*/

assert omicron.main ==~ /[A-Za-z][A-Za-z0-9_]*/  : "In omicron.properties: main should be a valid Java identifier"
assert omicron.pkg ==~ /[A-Za-z][A-Za-z0-9_\.]*/  : "In omicron.properties: pkg should be a valid Java pkg name"
assert omicron.omicronVersion!=null : "In omicron.properties: omicronVersion is mandatory"
assert omicron.version!=null : "In omicron.properties: version is mandatory"

version = omicron.version

repositories {
    mavenCentral()
    mavenLocal()
	maven { url 'https://jitpack.io' }
}

configurations {
    // configuration that holds jars to include in the jar
    extraLibs
}

dependencies {
    implementation group: 'com.github.msx80', name: 'omicron-api', version: omicron.omicronVersion
	runtimeOnly group: 'com.github.msx80.omicron', name: 'omicron-desktop', version: omicron.omicronVersion
	// runtimeOnly "com.badlogicgames.gdx:gdx-platform:1.9.10:natives-desktop"
	// to add dependencies from properties 
	if(omicron.dep) {
		def deps = omicron.dep.split(";")
		for (d in deps) {
		    // println "Extra dependency: "+d
			// compileOnly becouse classes in dependencies will be packed in the cartridge (see jar.from)
			compileOnly d
			extraLibs d
	   }
	}
	
}

jar {
	from('.') {
      include 'omicron.properties'
      
   }
   from {
    // we want to package extra dependencies but NOT the api, since it will 
    // already be included as dependency in the pom and present in the runtime
   	configurations.extraLibs.collect { it.getName().equals("omicron-api-0.0.1.jar")? null :( it.isDirectory() ? it : zipTree(it)) }
   }
    manifest {
        attributes 'Implementation-Title': omicron.name,
                   'Implementation-Version': omicron.version,
                   'Omicron-Cartridge': 'true'
    }
/*	from {
		println configurations.compileClasspath
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }*/
	destinationDir = file("$rootDir")
    archiveName omicron.main+'.omicron'
}

 publishing {
        publications {
            maven(MavenPublication) {
                groupId = omicron.pkg
                artifactId = omicron.main
                version = omicron.version

                from components.java
			}
        }
  }
  
task run(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Run the main class with ExecTask"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), "com.github.msx80.omicron.DesktopLauncher", omicron.pkg+"."+omicron.main
}  
  
def styler = 'black red green yellow blue magenta cyan white'
        .split().toList().withIndex(30)
        .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }  

tasks.publishToMavenLocal.doLast(){
        println ''
		println "${styler['yellow']('Published to maven local as:')} ${styler['cyan'](omicron.pkg+':'+omicron.main+':'+omicron.version)}"
		println ''
    }
tasks.build.doLast(){
   
		
        println ''
		println "${styler['yellow']('Generated cartridge:')}  ${styler['cyan'](omicron.main+'.omicron')}"
		println ''
    }	